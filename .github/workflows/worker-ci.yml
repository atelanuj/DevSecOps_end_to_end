---
name: Voting application CI worker
    
on:
    workflow_dispatch:
    push:
        branches:
            - Voting-Application
        paths:
            - worker/**
    
env:
    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    # DATREE_TOKEN: ${{ secrets.DATREE_TOKEN }}
        
jobs:
    SecurityScan:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Install JAVA latest
              uses: actions/setup-java@v4
              with:
                distribution: 'temurin' # See 'Supported distributions' for available options
                java-version: '21'
                java-package: 'jdk'
                check-latest: true
            
            - name: SonarQube Scan
              uses: SonarSource/sonarqube-scan-action@v4.2.1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                SONAR_TOKEN: ${{env.SONAR_TOKEN}}
                SONAR_HOST_URL: ${{env.SONAR_HOST_URL}}

            - name: SonarQube Server Quality Gate check
              id: sonarqube-quality-gate-check
              uses: sonarsource/sonarqube-quality-gate-action@master
              with:
                pollingTimeoutSec: 600
              timeout-minutes: 8
              env:
                SONAR_TOKEN: $SONAR_TOKEN
                SONAR_HOST_URL: $SONAR_HOST_URL #OPTIONAL

            - name: "Example show SonarQube Server Quality Gate Status value"
              run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

            # - name: Run Datree k8s Manifests Policy Check
            #   continue-on-error: true
            #   uses: datreeio/action-datree@main
            #   with:
            #     path: 'k8s/**/*.yml' 
            #     cliArguments: '--only-k8s-files'

            - name: OWASP Dependency check
              uses: dependency-check/Dependency-Check_Action@main
              continue-on-error: true
              id: Depcheck
              env:
                JAVA_HOME: /opt/jdk
              with:
                project: 'Call_Booking_app'
                path: '.'
                format: 'HTML'
                out: 'reports' # this is the default, no need to specify unless you wish to override it
                args: >
                    --failOnCVSS 7
                    --enableRetired

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              if: ${{ steps.Depcheck.outputs.result == 'success' }}
              with:
                name: OWASP-dependecy-report
                path: './reports/dependency-check-report_workers_v${{github.run_number}}.html'
        
            - name: Run Trivy vulnerability scanner on filesystem
              uses: aquasecurity/trivy-action@0.28.0
              with:
                scan-type: 'fs'
                ignore-unfixed: true
                format: 'sarif'
                output: 'trivy-results.sarif'
                severity: 'CRITICAL'

    build-and-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
            
            - name: Docker login
              run: |
                docker login -u "${{ vars.DOCKER_USERNAME }}" -p "${{ secrets.DOCKERHUB_PASS }}"

            - name: Docker Build
              run: docker build -t worker ./worker

            - name: Run Trivy vulnerability scanner on Docker image
              uses: aquasecurity/trivy-action@0.28.0
              continue-on-error: true
              with:
                    image-ref: 'worker'
                    format: 'table'
                    exit-code: '1'
                    ignore-unfixed: true
                    vuln-type: 'os,library'
                    severity: 'CRITICAL,HIGH'
    
            - name: Build and Push Admin UI image
              run: |
                echo "Building and pushing Admin UI image"
                docker tag worker ${{ vars.DOCKER_USERNAME }}/worker:v${{github.run_number}}
                docker push ${{ vars.DOCKER_USERNAME }}/worker:v${{github.run_number}}
    
    Deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
    
            - name: Updating the tag in Manifests for Latest Image.
              run: |
                    sed -i 's|image:.*|image: '"${{ vars.DOCKER_USERNAME }}"'/worker:v'"${{github.run_number}}"'|g' k8s/worker/deployment.yml
                    git config --local user.email "github-actions[bot]@users.noreply.github.com"
                    git config --local user.name "github-actions[bot]"
                    git pull
                    git commit -a -m "Updated the Image tag to ${{github.run_number}}"
                    echo "Updated the tag in Manifests for ADMIN UI with Latest Image."
    
            - name: Deploy to Kubernetes
              uses: ad-m/github-push-action@master
              with:
                github_token: ${{ secrets.GIT_TOKEN }}
                branch: ${{ github.ref }}